apiVersion: apps/v1
kind: Deployment
metadata:
  name: drycc-builder
  labels:
    heritage: drycc
  annotations:
    component.drycc.cc/version: {{ .Values.imageTag }}
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: drycc-builder
  template:
    metadata:
      labels:
        app: drycc-builder
    spec:
      {{- include "common.affinities.pods.soft" (dict "key" "app" "values" (list "drycc-builder")) | indent 6 }}
      serviceAccount: drycc-builder
      initContainers:
      - name: drycc-builder-init
        image: {{.Values.imageRegistry}}/{{.Values.imageOrg}}/python-dev:latest
        imagePullPolicy: {{.Values.imagePullPolicy}}
        args:
          - netcat
          - -v
          - -a
          - $(DRYCC_MINIO_SERVICE_HOST):$(DRYCC_MINIO_SERVICE_PORT)
      containers:
      - name: drycc-builder
        image: {{.Values.imageRegistry}}/{{.Values.imageOrg}}/builder:{{.Values.imageTag}}
        imagePullPolicy: {{.Values.imagePullPolicy}}
        ports:
          - containerPort: 2223
            name: ssh
          - containerPort: 8092
            name: healthsrv
{{- if or (.Values.limitsCpu) (.Values.limitsMemory)}}
        resources:
          limits:
{{- if (.Values.limitsCpu) }}
            cpu: {{.Values.limitsCpu}}
{{- end}}
{{- if (.Values.limitsMemory) }}
            memory: {{.Values.limitsMemory}}
{{- end}}
{{- end}}
        env:
          # NOTE(bacongobbler): use drycc/registry_proxy to work around Docker --insecure-registry requirements
          - name: "DRYCC_REGISTRY_PROXY_HOST"
            value: "127.0.0.1"
          - name: "DRYCC_REGISTRY_PROXY_PORT"
            value: "{{ .Values.global.registryProxyPort }}"
          - name: "HEALTH_SERVER_PORT"
            value: "8092"
          - name: "EXTERNAL_PORT"
            value: "2223"
          - name: BUILDER_STORAGE
            value: "{{ .Values.global.storage }}"
          - name: "DRYCC_REGISTRY_LOCATION"
            value: "{{ .Values.global.registryLocation }}"
          - name: "TTL_SECONDS_AFTER_FINISHED"
            value: "{{ .Values.global.ttlSecondsAfterFinished }}"
          # Set GIT_LOCK_TIMEOUT to number of minutes you want to wait to git push again to the same repository
          - name: "GIT_LOCK_TIMEOUT"
            value: "30"
          - name: IMAGEBUILDER_IMAGE_PULL_POLICY
            valueFrom:
              configMapKeyRef:
                name: imagebuilder-config
                key: imagePullPolicy
          # This var needs to be passed so that the minio client (https://github.com/minio/mc) will work in Alpine linux
          - name: "DOCKERIMAGE"
            value: "1"
          - name: "DRYCC_DEBUG"
            value: "false"
          - name: "POD_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: DRYCC_BUILDER_KEY
            valueFrom:
              secretKeyRef:
                name: builder-key-auth
                key: builder-key
{{- if (.Values.builder_pod_node_selector) }}
          - name: BUILDER_POD_NODE_SELECTOR
            value: {{.Values.builder_pod_node_selector}}
{{- end}}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8092
          initialDelaySeconds: 30
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8092
          initialDelaySeconds: 30
          timeoutSeconds: 1
        volumeMounts:
            - name: builder-key-auth
              mountPath: /var/run/secrets/api/auth
              readOnly: true
            - name: builder-ssh-private-keys
              mountPath: /var/run/secrets/drycc/builder/ssh
              readOnly: true
            - name: objectstore-creds
              mountPath: /var/run/secrets/drycc/objectstore/creds
              readOnly: true
            - name: imagebuilder-config
              mountPath: /etc/imagebuilder
              readOnly: true
      volumes:
        - name: builder-key-auth
          secret:
            secretName: builder-key-auth
        - name: builder-ssh-private-keys
          secret:
            secretName: builder-ssh-private-keys
        - name: objectstore-creds
          secret:
            secretName: objectstorage-keyfile
        - name: imagebuilder-config
          configMap:
            name: imagebuilder-config
